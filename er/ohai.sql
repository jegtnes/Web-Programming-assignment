
--------------------------------------------------------------
-- Database creation Script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- Verbose generation: ON

-- note: spaces within table/column names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- To drop the tables generated by this script run -
--   'U:\public_html\wp\assignment\ohai_drop.sql'

--------------------------------------------------------------



--------------------------------------------------------------
-- Table Creation --

-- Each entity on the model is represented by a table that needs to be created within the Database.
-- Within SQL new tables are created using the CREATE TABLE command.
-- When a table is created its name and its attributes are defined.
-- The values of which are derived from those specified on the model.
-- Certain constraints are sometimes also specified, such as identification of primary keys.

-- Create a Database table to represent the "customer" entity.
CREATE TABLE customer(
	id	INTEGER NOT NULL,
	first_name	VARCHAR(25) NOT NULL,
	last_name	VARCHAR(25) NOT NULL,
	address	VARCHAR(100) NOT NULL,
	postcode	VARCHAR(8) NOT NULL,
	city	VARCHAR(25) NOT NULL,
	email	VARCHAR(50) NOT NULL UNIQUE,
	password	VARCHAR(50) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "customer".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_customer PRIMARY KEY (id)
);

-- Create a Database table to represent the "product" entity.
CREATE TABLE product(
	product_id	INTEGER NOT NULL,
	type_id	INTEGER NOT NULL,
	name	VARCHAR(50) NOT NULL,
	description	VARCHAR(500),
	release_year	INTEGER,
	publisher	VARCHAR(50),
	image_url	VARCHAR(200),
	language	VARCHAR(50),
	stock_level	INTEGER,
	fk1_type_id	INTEGER NOT NULL,
	fk1_book_type	VARCHAR(255) NOT NULL,
	fk2_type_id	INTEGER NOT NULL,
	fk3_order_id	INTEGER NOT NULL,
	fk3_product_id	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "product".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_product PRIMARY KEY (product_id,type_id,fk1_type_id,fk1_book_type,fk2_type_id)
);

-- Create a Database table to represent the "prod_book" entity.
CREATE TABLE prod_book(
	type_id	INTEGER NOT NULL,
	book_type	VARCHAR(255) CHECK(book_type IN ('ebook','paperback','hardback')) NOT NULL,
	author	VARCHAR(25) NOT NULL,
	page_number	INTEGER,
	isbn_10	INTEGER,
	isbn_13	INTEGER,
	-- Specify the PRIMARY KEY constraint for table "prod_book".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_prod_book PRIMARY KEY (type_id,book_type)
);

-- Create a Database table to represent the "prod_film" entity.
CREATE TABLE prod_film(
	type_id	INTEGER NOT NULL,
	film_type	VARCHAR(255) CHECK(film_type IN ('dvd','bluray','download')),
	director	VARCHAR(25),
	length	BIGINT,
	studio	VARCHAR(25),
	-- Specify the PRIMARY KEY constraint for table "prod_film".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_prod_film PRIMARY KEY (type_id)
);

-- Create a Database table to represent the "customer_order" entity.
CREATE TABLE customer_order(
	order_id	INTEGER NOT NULL,
	customer_id	INTEGER NOT NULL,
	order_placed_date	DATE,
	order_status	VARCHAR(255) CHECK(order_status IN ('placed','paid','shipped','returned')) NOT NULL,
	fk1_id	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "customer_order".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_customer_order PRIMARY KEY (order_id,customer_id)
);

-- Create a Database table to represent the "customer_order_products" entity.
CREATE TABLE customer_order_products(
	order_id	INTEGER NOT NULL,
	product_id	INTEGER NOT NULL,
	fk1_order_id	INTEGER NOT NULL,
	fk1_customer_id	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "customer_order_products".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_customer_order_products PRIMARY KEY (order_id,product_id)
);


--------------------------------------------------------------
-- Alter Tables to add fk constraints --

-- Now all the tables have been created the ALTER TABLE command is used to define some additional
-- constraints.  These typically constrain values of foreign keys to be associated in some way
-- with the primary keys of related tables.  Foreign key constraints can actually be specified
-- when each table is created, but doing so can lead to dependency problems within the script
-- i.e. tables may be referenced before they have been created.  This method is therefore safer.

-- Alter table to add new constraints required to implement the "is_a" relationship

-- This constraint ensures that the foreign key of table "product"
-- correctly references the primary key of table "prod_book"

ALTER TABLE product ADD CONSTRAINT fk1_product_to_prod_book FOREIGN KEY(fk1_type_id,fk1_book_type) REFERENCES prod_book(type_id,book_type) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "is_a" relationship

-- This constraint ensures that the foreign key of table "product"
-- correctly references the primary key of table "prod_film"

ALTER TABLE product ADD CONSTRAINT fk2_product_to_prod_film FOREIGN KEY(fk2_type_id) REFERENCES prod_film(type_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "customer_order_customer" relationship

-- This constraint ensures that the foreign key of table "customer_order"
-- correctly references the primary key of table "customer"

ALTER TABLE customer_order ADD CONSTRAINT fk1_customer_order_to_customer FOREIGN KEY(fk1_id) REFERENCES customer(id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "product_customer_order_products" relationship

-- This constraint ensures that the foreign key of table "product"
-- correctly references the primary key of table "customer_order_products"

ALTER TABLE product ADD CONSTRAINT fk3_product_to_customer_order_products FOREIGN KEY(fk3_order_id,fk3_product_id) REFERENCES customer_order_products(order_id,product_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "customer_order_products_customer_order" relationship

-- This constraint ensures that the foreign key of table "customer_order_products"
-- correctly references the primary key of table "customer_order"

ALTER TABLE customer_order_products ADD CONSTRAINT fk1_customer_order_products_to_customer_order FOREIGN KEY(fk1_order_id,fk1_customer_id) REFERENCES customer_order(order_id,customer_id) ON DELETE RESTRICT ON UPDATE RESTRICT;


--------------------------------------------------------------
-- End of DDL file auto-generation
--------------------------------------------------------------
